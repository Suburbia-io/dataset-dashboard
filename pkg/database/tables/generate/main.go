package main

import "github.com/Suburbia-io/dashboard/pkg/dbgen"

func main() {

	var tables = []dbgen.Table{}

	NewTable := func(name string) dbgen.Table {
		t := dbgen.NewTable(name)
		tables = append(tables, t)
		return t
	}

	table := NewTable("customers")
	table.Col("customer_id", "string").PK().AutoUUID().Validator("UUID")
	table.Col("name", "string").Sanitizer("SingleLineString").Validator("NonEmptyString")
	table.Col("created_at", "time.Time").NoUpdate()
	table.Col("archived_at", "*time.Time")

	// The view needs to be dropped and recreated when adding columns. See migration 0035-users-invitations.go.
	table = NewTable("users").View("user_view")
	table.Col("customer_id", "string").PK().Validator("UUID")
	table.Col("user_id", "string").PK().AutoUUID().Validator("UUID")
	table.Col("customer_name", "string").ViewOnly()
	table.Col("name", "string").Sanitizer("SingleLineString").Validator("HumanName")
	table.Col("email", "string").Sanitizer("Email").Validator("Email")
	table.Col("is_role_admin", "bool").NoUpdate().DirectUpdate()
	table.Col("is_role_super_admin", "bool").NoUpdate().DirectUpdate()
	table.Col("is_role_customer_user", "bool").NoUpdate().DirectUpdate()
	table.Col("is_role_labeler", "bool").NoUpdate().DirectUpdate()
	table.Col("hash", "string").JSONName("-").NoUpdate().DirectUpdate().Sanitizer("SingleLineString")
	table.Col("api_key", "*string").NoUpdate().DirectUpdate().Sanitizer("SingleLineStringPtr")
	table.Col("sftp_username", "string").NoUpdate().Sanitizer("SingleLineString")
	table.Col("sftp_pub_key", "string").Sanitizer("SingleLineString")
	table.Col("created_at", "time.Time").NoUpdate()
	table.Col("archived_at", "*time.Time")
	table.Col("last_active_at", "*time.Time").NoUpdate().DirectUpdate()
	table.Col("login_token", "*string").NoUpdate().DirectUpdate().Sanitizer("SingleLineStringPtr")
	table.Col("login_token_expires_at", "*time.Time").NoUpdate().DirectUpdate()
	table.GetBy("UserID", "user_id")
	table.GetBy("Email", "email")
	table.GetBy("APIKey", "api_key")
	table.GetBy("SFTPUsername", "sftp_username")

	table = NewTable("datasets")
	table.Col("dataset_id", "string").PK().AutoUUID().Validator("UUID")
	table.Col("name", "string").Sanitizer("SingleLineString").Validator("NonEmptyString")
	table.Col("slug", "string").Sanitizer("SingleLineString").Validator("Slug")
	table.Col("manageable", "bool")
	table.Col("created_at", "time.Time").NoUpdate()
	table.Col("archived_at", "*time.Time")
	table.GetBy("Slug", "slug")

	table = NewTable("locations").View("location_view")
	table.Col("dataset_id", "string").PK().Validator("UUID")
	table.Col("location_hash", "string").PK().Sanitizer("SingleLineString").Validator("NonEmptyString")
	table.Col("location_string", "string").Sanitizer("SingleLineString").Validator("NonEmptyString").NoUpdate()
	table.Col("parsed_country_code", "string")
	table.Col("parsed_postal_code", "string")
	table.Col("geonames_postal_codes", "json.RawMessage")
	table.Col("geoname_id", "*int")
	table.Col("geonames_hierarchy", "json.RawMessage")
	table.Col("approved", "*bool")
	table.Col("created_at", "time.Time").NoUpdate()
	table.Col("name", "string").ViewOnly()
	table.Col("population", "string").ViewOnly()
	table.Col("country_code", "string").ViewOnly()
	table.Col("parent_name", "string").ViewOnly()
	table.Col("parent_population", "string").ViewOnly()
	table.Col("parent_geoname_id", "string").ViewOnly()
	table.GetBy("LocationHash", "location_hash")

	table = NewTable("tag_types")
	table.Col("dataset_id", "string").PK().Validator("UUID")
	table.Col("tag_type_id", "string").PK().AutoUUID().Validator("UUID")
	table.Col("tag_type", "string").Sanitizer("SingleLineString").Validator("TagType")
	table.Col("description", "string").Sanitizer("TrimSpace")
	table.GetBy("TagType", "dataset_id", "tag_type")

	table = NewTable("tags")
	table.Col("dataset_id", "string").PK().Validator("UUID")
	table.Col("tag_type_id", "string").PK().Validator("UUID")
	table.Col("tag_id", "string").PK().AutoUUID().Validator("UUID")
	table.Col("tag", "string").Sanitizer("SingleLineString").Validator("Tag")
	table.Col("description", "string").Sanitizer("TrimSpace")
	table.Col("internal_notes", "string").Sanitizer("TrimSpace")
	table.Col("is_included", "bool")
	table.Col("grade", "int").Validator("TagGrade")
	table.Col("num_fingerprints", "int").NoUpdate().DirectUpdate()
	table.Col("num_line_items", "int").NoUpdate().DirectUpdate()
	table.GetBy("Tag", "dataset_id", "tag_type_id", "tag")

	table = NewTable("fingerprints")
	table.Col("dataset_id", "string").PK().Validator("UUID")
	table.Col("fingerprint", "string").PK().Sanitizer("SingleLineString").Validator("NonEmptyString")
	table.Col("raw_text", "string").Sanitizer("SingleLineString")
	table.Col("annotations", "string").NoUpdate().DirectUpdate().Sanitizer("SingleLineString")
	table.Col("updated_at", "time.Time")
	table.Col("count", "int")

	table = NewTable("tag_apps")
	table.Col("tag_app_id", "string").PK().Validator("UUID").AutoUUID()
	table.Col("name", "string")
	table.Col("weight", "float64")
	table.Col("archived_at", "*time.Time")

	table = NewTable("tag_app_tags")
	table.Col("dataset_id", "string").PK().Validator("UUID")
	table.Col("fingerprint", "string").PK()
	table.Col("tag_type_id", "string").PK().Validator("UUID")
	table.Col("tag_app_id", "string").PK().Validator("UUID")
	table.Col("tag_id", "string").Validator("UUID")
	table.Col("confidence", "float64")
	table.Col("updated_at", "time.Time")
	table.Col("user_id", "string").Validator("UUID")
	table.NoUpdateTests()

	table = NewTable("tag_app_historical_tags").View("tag_app_historical_tag_view")
	table.Col("dataset_id", "string").PK().Validator("UUID")
	table.Col("fingerprint", "string").PK()
	table.Col("tag_type_id", "string").PK().Validator("UUID")
	table.Col("tag_app_id", "string").PK().Validator("UUID")
	table.Col("tag_app_name", "string").ViewOnly()
	table.Col("tag_id", "string").Validator("UUID")
	table.Col("tag", "string").ViewOnly()
	table.Col("confidence", "float64")
	table.Col("updated_at", "time.Time").PK()
	table.Col("user_id", "string").Validator("UUID")
	table.Col("user_name", "string").ViewOnly()
	table.Col("user_email", "string").ViewOnly()

	table.NoUpdateTests()

	table = NewTable("consensus_tags")
	table.Col("dataset_id", "string").PK().Validator("UUID")
	table.Col("fingerprint", "string").PK()
	table.Col("tag_type_id", "string").PK().Validator("UUID")
	table.Col("tag_id", "string").Validator("UUID")
	table.Col("confidence", "float64").Validator("Confidence")
	table.Col("source_count", "int64")
	table.Col("updated_at", "time.Time")
	table.NoUpdateTests()

	table = NewTable("customer_datasets")
	table.Col("customer_dataset_id", "string").NoUpdate()
	table.Col("customer_entity", "string").PK()
	table.Col("dataset_entity", "string").PK()
	table.Col("created_at", "time.Time").NoUpdate()

	table = NewTable("audit_trails")
	table.Col("audit_trail_id", "string").PK().AutoUUID()
	table.Col("by_user", "*string").NoUpdate().Validator("UUIDPtr")
	table.Col("type", "string").NoUpdate()
	table.Col("related_table", "string").NoUpdate()
	table.Col("related_id", "string").NoUpdate().Validator("UUID")
	table.Col("payload", "string").NoUpdate()
	table.Col("created_at", "time.Time").NoUpdate()

	table = NewTable("corporations")
	table.Col("corporation_id", "string").PK().AutoUUID().Validator("UUID")
	table.Col("exchange", "string")
	table.Col("code", "string")
	table.Col("name", "string")
	table.Col("slug", "string").Validator("Slug")
	table.Col("isin", "string")
	table.Col("cusip", "string")
	table.Col("dataset_id", "string").NoUpdate().Validator("UUID")
	table.Col("created_at", "time.Time").NoUpdate()
	table.Col("updated_at", "time.Time").NoUpdate()
	table.Col("archived_at", "*time.Time").NoUpdate()

	table = NewTable("corporation_types")
	table.Col("corporation_type_id", "string").PK().AutoUUID().Validator("UUID")
	table.Col("dataset_id", "string").NoUpdate().Validator("UUID")
	table.Col("corporation_type", "string")
	table.Col("description", "string")
	table.Col("created_at", "time.Time").NoUpdate()

	table = NewTable("corp_mappings")
	table.Col("corp_mapping_id", "string").PK().AutoUUID().Validator("UUID")
	table.Col("corp_type_id", "string").Validator("UUID")
	table.Col("tag_type_id", "string").Validator("UUID")
	table.Col("tag_id", "string").Validator("UUID")

	table = NewTable("corp_mapping_rules")
	table.Col("corp_mapping_rule_id", "string").PK().AutoUUID().Validator("UUID")
	table.Col("corp_mapping_id", "string").Validator("UUID")
	table.Col("corp_id", "string").Validator("UUID")
	table.Col("internal_notes", "string")
	table.Col("external_notes", "string")
	table.Col("from_date", "time.Time")
	table.Col("country", "string")

	table = NewTable("sessions")
	table.Col("token", "string").PK().Sanitizer("SingleLineString").Validator("NonEmptyString")
	table.Col("user_id", "string").NoUpdate().Validator("UUID")
	table.Col("expires_at", "time.Time").NoUpdate()

	dbgen.Generate(
		tables,
		"tables",
		"../../dbgen/tmpl",
		".")
}
